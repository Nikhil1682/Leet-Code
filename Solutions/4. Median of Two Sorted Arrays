 double findMedianSortedArrays(vector<int>& vec1, vector<int>& vec2) {
        
/*
        for(int i=0;i<vec2.size() ;i++){
            vec1.push_back(vec2[i]);
        }

        sort(vec1.begin() , vec1.end());

        int n=vec1.size();

        if(n%2 != 0){
            return vec1[n/2];
        }

        int end = n/2;
        int st = end-1;

        double ans = (double)(vec1[st] + vec1[end]) / 2*1.0;

        return ans;
*/



    int m=vec1.size();
    int n=vec2.size();
    
    vector<int> ans;
    
        
        int i=0;
        int j=0;

        while(i<m && j<n){
            if(vec1[i] < vec2[j]){
                ans.push_back(vec1[i]);
                i++;
            }

            else{
                ans.push_back(vec2[j]);
                j++;
            }
        }

        while(i<m){
                ans.push_back(vec1[i]);
                i++;
            
        }

        while(j<n){
                ans.push_back(vec2[j]);
                j++;
        }





    int st=0;
    int end=ans.size()-1;


    int first;
    int second;

    while(st<=end){

        first=ans[st];
        second=ans[end];
        
        st++;
        end--;

    }


    double ansReturn = double(first+second)/2;

    return ansReturn;





        
    }
